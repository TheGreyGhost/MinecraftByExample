The redstone meter shows two techniques:
(1) how to access redstone power levels on the client side, to change the rendering of a block
(2) how to make a block which has power inputs and power outputs in the same block; including the use of block update ticks

For (1):
We want to change the appearance of our block based on the amount of redstone power it is receiving.
You might think that this could be done using
Block.getActualState() or ISmartBlockModel using getExtendedState()
however unfortunately this doesn't work.
The reason is that these methods are provided with an IBlockAccess instead of a World; block rendering is multithreaded and
  is performed on a cached copy of the world, which only stores some of the information and has no direct access to
  weak power methods.
It could be done by storing the redstone power in the block metadata, which would leave no room for any other information
   (for example- which way the block is facing).
It could also be done using a TileEntity with stored information that is sent from server to client.

The third alternative method we use here is to have a TileEntitySpecialRenderer draw the moving parts (i.e. the needle)-
  the TESR has access to its TileEntity, which has access to World and hence all the redstone power methods, which it
  can use to calculate the input power instead of having to retrieve from a stored value on the client side.
  NOTE - Although you could use this trick to access World during a call to Block.getActualState() or getExtendedState(),
  I wouldn't recommend it, because this might lead to the rendering thread accessing the same objects as the client
  thread without any synchronisation, which is usually a recipe for disaster (i.e. crashes and other weird glitches
  that are very hard to debug).  In contrast, using this from the TESR is ok because it is running in the client thread.

For (2):
The key thing to understand is that the block must store its power level somehow on the server side, due to the way that
  redstone power is propagated - in particular getWeakPower() is provided with IBlockAccess not World;
  see here for further explanation http://greyminecraftcoder.blogspot.com.au/2015/11/redstone.html.
  In this example, we use a TileEntity to store the power level information (similar to a BlockRedstoneComparator).

We use scheduled block updates for the flashing; a similar strategy is used by BlockRedstoneRepeater.
Alternatively, we could also have made our TileEntity implement ITickable (so that the update() method is
  called every tick) and counted the number of ticks.
